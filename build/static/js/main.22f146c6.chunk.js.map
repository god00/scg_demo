{"version":3,"sources":["layouts/default/body.js","layouts/default/footer.js","layouts/default/top.js","layouts/default/index.js","routes/route.js","components/home.js","components/about.js","services/request.js","services/api.js","components/scg.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["body","styled","div","MyFooter","footer","WhiteText","Footer","Component","Nav","nav","LiWithMargin","li","FlexUl","ul","MyText","span","Top","className","to","DefaultLayout","children","Fragment","RouteWrapper","component","rest","render","props","Home","AboutLayout","InfoLayout","TextWithMargit","About","title","src","width","height","appFetch","path","config","Promise","resolve","reject","fetch","appConfig","prod","then","res","json","result","error","request","method","headers","JSON","stringify","cachingApiLocal","localStorage","getItem","cachingApi","parse","search","restaurants","list","listStr","post","setItem","catch","err","keyword","toLowerCase","get","status","MyButton","Button","MyCol","Col","ResultCol","TextRed","TextGreen","MyDiv","SCG","searchValue","e","api","searchList","searchInput","value","Array","isArray","results","setState","findNearby","nearbyInput","findNearByRestaurants","nearby","state","location","lat","lng","key","target","blur","nearbyResults","this","length","map","i","Accordion","Card","Toggle","as","Header","eventKey","rel","href","getGoogleMapLink","geometry","name","Collapse","Body","Container","Row","type","placeholder","ref","c","onKeyDown","handleKeyDown","onBlur","variant","onClick","renderSearchResults","renderGoogleMap","Routes","exact","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"olBAEO,IAAMA,EAAOC,IAAOC,IAAV,K,6TCCjB,IAAMC,EAAWF,IAAOG,OAAV,KAORC,EAAYJ,IAAOC,IAAV,KAeAI,E,iLATP,OACI,kBAACH,EAAD,KACI,kBAACE,EAAD,4C,GAJKE,a,8cCVrB,IAAMC,EAAMP,IAAOQ,IAAV,KAOHC,EAAeT,IAAOU,GAAV,KAGZC,EAASX,IAAOY,GAAV,KAINC,EAASb,IAAOc,KAAV,KAmBGC,E,iLAZP,OACI,kBAACR,EAAD,CAAKS,UAAU,iDACX,kBAACL,EAAD,CAAQK,UAAU,sBACd,kBAACP,EAAD,KAAc,kBAAC,IAAD,CAAMQ,GAAI,IAAKD,UAAU,YAAW,kBAACH,EAAD,eAClD,kBAACJ,EAAD,KAAc,kBAAC,IAAD,CAAMQ,GAAI,OAAQD,UAAU,YAAW,kBAACH,EAAD,cACrD,kBAACJ,EAAD,KAAc,kBAAC,IAAD,CAAMQ,GAAI,SAAUD,UAAU,YAAW,kBAACH,EAAD,sB,GAPzDP,aClBH,SAASY,EAAT,GAAsC,IAAbC,EAAY,EAAZA,SACpC,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,KAAOD,GACP,kBAAC,EAAD,OCNG,SAASE,EAAT,GAGX,IAFSf,EAEV,EAFDgB,UACGC,EACF,6BAED,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GAAK,OACX,kBAAC,EAAD,KACE,kBAACnB,EAAcmB,Q,ICFVC,E,iLARX,OACI,6BACE,yC,GAJSpB,a,2hBCCnB,IAAMqB,EAAc3B,IAAOC,IAAV,KAIX2B,EAAa5B,IAAOC,IAAV,KAMVY,EAASb,IAAOC,IAAV,KAMN4B,EAAiB7B,IAAOC,IAAV,KA0BL6B,E,iLApBP,OACI,kBAACH,EAAD,KACI,kBAACC,EAAD,KACI,kBAACC,EAAD,sBACkB,6BADlB,4BAE6B,6BACzB,6BAHJ,sCAIuC,6BAJvC,mJAKoJ,6BAChJ,6BANJ,8IASA,kBAAC,EAAD,eAEJ,4BAAQE,MAAM,SAASC,IAAI,4EAA4EC,MAAM,MAAMC,OAAO,a,GAhBtH5B,a,wDCrBd6B,EAAW,SAACC,EAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAIC,EAAUC,MAAd,OAAqBP,GAAQC,GAC7BO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFR,EAAQQ,MAER,SAAAC,GACIR,EAAOQ,UCTrBC,EAAU,I,4FDgBRb,GAKA,OAAOD,EAASC,EAJD,CACXc,OAAQ,MACRC,QAAS,CAAE,eAAgB,wB,2BAK9Bf,EAAMrC,GACP,IAAMsC,EAAS,CACXa,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BpD,KAAMqD,KAAKC,UAAUtD,IAEzB,OAAOoC,EAASC,EAAMC,O,MC7BxBiB,GAAkBC,aAAaC,QAAQ,cACvCC,GAAaH,GAAkBF,KAAKM,MAAMJ,IAAmB,CAC/DK,OAAQ,GACRC,YAAa,IA4CF,O,mGAxCAC,GACP,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GACzB,IAAMsB,EAAUV,KAAKC,UAAUQ,GACG,MAA9BJ,GAAWE,OAAOG,GAClBvB,EAAQkB,GAAWE,OAAOG,IAG1Bb,EAAQc,KAAK,cAAe,CAAEF,SACzBjB,MAAK,SAAAC,GACFY,GAAWE,OAAOG,GAAWjB,EAC7BU,aAAaS,QAAQ,aAAcZ,KAAKC,UAAUI,KAClDlB,EAAQM,MAEXoB,OAAM,SAAAC,GAAS1B,EAAO0B,W,4CAMjBC,GAElB,OADAA,EAAUA,EAAQC,cACX,IAAI9B,SAAQ,SAACC,EAASC,GACc,MAAnCiB,GAAWG,YAAYO,GACvB5B,EAAQkB,GAAWG,YAAYO,IAG/BlB,EAAQoB,IAAR,kCAAuCF,IAClCvB,MAAK,SAAAC,GACiB,OAAfA,EAAIyB,SACJb,GAAWG,YAAYO,GAAWtB,EAClCU,aAAaS,QAAQ,aAAcZ,KAAKC,UAAUI,MAEtDlB,EAAQM,MAEXoB,OAAM,SAAAC,GAAS1B,EAAO0B,a,iiCChC3C,IAAMK,GAAWvE,YAAOwE,IAAPxE,CAAH,MAkBRyE,GAAQzE,YAAO0E,IAAP1E,CAAH,MAGL2E,GAAY3E,YAAO0E,IAAP1E,CAAH,MAGT4E,GAAU5E,IAAOc,KAAV,MAGP+D,GAAY7E,IAAOc,KAAV,MAGTgE,GAAQ9E,IAAOC,IAAV,MA8GI8E,G,YAtGX,WAAYtD,GAAQ,IAAD,8BACf,4CAAMA,KAmBVuD,YAAc,SAACC,GACXC,GAAIC,WAAW,EAAKC,YAAYC,OAAOzC,MAAK,SAAAC,GACpCyC,MAAMC,QAAQ1C,EAAI2C,UAClB,EAAKC,SAAS,CAAE9B,OAAQ,CAAE6B,QAAS3C,EAAI2C,eAvBhC,EA4BnBE,WAAa,WACT,IAAMvB,EAAU,EAAKwB,YAAYN,MAClB,MAAXlB,GAA+B,KAAZA,GACnBe,GAAIU,sBAAsBzB,GAASvB,MAAK,SAAAC,GAChCyC,MAAMC,QAAQ1C,EAAI2C,UAClB,EAAKC,SAAS,CAAEI,OAAQ,CAAEL,QAAS3C,EAAI2C,eA/BnD,EAAKM,MAAQ,CACTnC,OAAQ,CAAE6B,QAAS,IACnBK,OAAQ,CAAEL,QAAS,KAJR,E,2HAWFO,GACb,MAAM,GAAN,OAfkB,+BAelB,OAA8BA,EAASC,IAAvC,YAA8CD,EAASE,O,oCAG7ChB,GACI,UAAVA,EAAEiB,KACFjB,EAAEkB,OAAOC,S,wCAsBE,IAAD,OAEGC,EADEC,KAAKR,MAAhBD,OACAL,QACR,GAA6B,IAAzBa,EAAcE,OACd,OAAOF,EAAcG,KAAI,SAACzD,EAAQ0D,GAAT,OACrB,kBAACC,EAAA,EAAD,CAAWR,IAAG,sBAAiBO,IAC3B,kBAACE,EAAA,EAAD,KACI,kBAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,KACxC,uBAAGZ,OAAO,SAASa,IAAI,sBAAsBC,KAAM,EAAKC,iBAAiBnE,EAAOoE,SAASpB,WAAzF,UAAwGhD,EAAOqE,QAEnH,kBAACV,EAAA,EAAUW,SAAX,CAAoBN,SAAS,KACzB,kBAACJ,EAAA,EAAKW,KAAN,KAAW,kBAACxC,GAAD,KAAQ/B,EAAM,4B,4CAa7C,OAFmBuD,KAAKR,MAAhBnC,OACA6B,QACagB,KAAI,SAACzD,EAAQ0D,GAC9B,OAAI1D,EAAiB,wBAAImD,IAAG,iBAAYO,IAAK,kBAAC5B,GAAD,eAAe9B,KACrD,wBAAImD,IAAG,iBAAYO,IAAK,kBAAC7B,GAAD,eAAa7B,U,+BAI1C,IAAD,OAEL,OAEI,kBAACwE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC/C,GAAD,KACI,2BAAOgD,KAAK,OAAOC,YAAY,YAAYC,IAAK,SAACC,GAAD,OAAO,EAAKxC,YAAcwC,GACtEC,UAAWvB,KAAKwB,cAChBC,OAAQzB,KAAKtB,eAGrB,kBAACP,GAAD,KACI,2BAAOgD,KAAK,OAAOC,YAAY,sBAAsBC,IAAK,SAACC,GAAD,OAAO,EAAKjC,YAAciC,GAChFC,UAAWvB,KAAKwB,cAChBC,OAAQzB,KAAKZ,aAEjB,kBAACnB,GAAD,CAAUyD,QAAQ,SAASC,QAAS3B,KAAKZ,YAAzC,YAGR,kBAAC8B,EAAA,EAAD,KACI,kBAAC7C,GAAD,KACK2B,KAAK4B,uBAEV,kBAACvD,GAAD,KACK2B,KAAK6B,yB,GA/FZ7H,aCxCH,SAAS8H,KACtB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOhG,KAAK,IAAIiG,OAAK,EAAC/G,UAAWI,IACjC,kBAAC,EAAD,CAAOU,KAAK,SAASd,UAAWQ,IAChC,kBAAC,EAAD,CAAOM,KAAK,OAAOd,UAAWyD,M,ICIrBuD,G,iLARX,OACE,kBAAC,IAAD,KACE,kBAAC,GAAD,W,GAJUhI,aCKEiI,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASnH,OAAO,kBAAC,GAAD,MAASoH,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpG,MAAK,SAAAqG,GACjCA,EAAaC,kB","file":"static/js/main.22f146c6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const body = styled.div`\r\n    margin: 60px 30px 0px 30px;\r\n    padding: 32px 16px;\r\n    height: 100%;\r\n    min-height: calc(100vh - 111px);\r\n`","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MyFooter = styled.footer`\r\n    height: 50px;\r\n    background-color: #ee2524;\r\n    display: flex;\r\n    font-size: 13px;\r\n    font-family: initial;\r\n`\r\nconst WhiteText = styled.div`\r\n    margin: auto 36px auto auto;\r\n    color: #e9ecef;\r\n`\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <MyFooter>\r\n                <WhiteText>Powered by Phosawat Ongmorakot</WhiteText>\r\n            </MyFooter>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Footer","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\n\r\nconst Nav = styled.nav`\r\n    position: fixed;\r\n    height: 60px;\r\n    width: 100%;\r\n    top: 0;\r\n    z-index: 999;\r\n`\r\nconst LiWithMargin = styled.li`\r\n    margin: 0 5px;\r\n`\r\nconst FlexUl = styled.ul`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst MyText = styled.span`\r\n    color: #ee2524;\r\n`\r\n\r\n\r\nclass Top extends Component {\r\n    render() {\r\n        return (\r\n            <Nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <FlexUl className=\"navbar-nav mr-auto\">\r\n                    <LiWithMargin><Link to={'/'} className=\"nav-link\"><MyText>Home</MyText></Link></LiWithMargin>\r\n                    <LiWithMargin><Link to={'/SCG'} className=\"nav-link\"><MyText>SCG</MyText></Link></LiWithMargin>\r\n                    <LiWithMargin><Link to={'/about'} className=\"nav-link\"><MyText>About</MyText></Link></LiWithMargin>\r\n                </FlexUl>\r\n            </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Top;","import React from \"react\";\r\nimport { body as Body } from \"./body\";\r\nimport Footer from \"./footer\";\r\nimport Top from \"./top\";\r\n\r\nexport default function DefaultLayout({ children }) {\r\n    return (\r\n        <React.Fragment>\r\n            <Top />\r\n            <Body>{children}</Body>\r\n            <Footer />\r\n        </React.Fragment>\r\n    )\r\n}","import React from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport Layout from '../layouts/default/index';\r\n\r\nexport default function RouteWrapper({\r\n  component: Component,\r\n  ...rest\r\n}) {\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => (\r\n        <Layout>\r\n          <Component {...props} />\r\n        </Layout>\r\n      )}\r\n    />\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Home</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AboutLayout = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n`\r\nconst InfoLayout = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 35%;\r\n`\r\nconst MyText = styled.div`\r\n    font-size: 50px;\r\n    font-family: cursive;\r\n    display: flex;\r\n    margin: auto;\r\n`\r\nconst TextWithMargit = styled.div`\r\n    margin: 36px;\r\n`\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <AboutLayout>\r\n                <InfoLayout>\r\n                    <TextWithMargit>\r\n                        Hello everyone<br />  \r\n                        This is my Demo website. <br/>\r\n                        <br/>\r\n                        On /SCG page you will see 2 column.<br/>\r\n                        First is column that you can fill anything after you fill value, it will send your input to search value from server and display results on UI. <br/>\r\n                        <br/>\r\n                        Second column, you still can fill anything like the first column but it will return list of restaurants in the name of area that you fill.\r\n                    </TextWithMargit>\r\n                    <MyText>Enjoy</MyText>\r\n                </InfoLayout>\r\n                <iframe title=\"resume\" src=\"https://drive.google.com/file/d/1ca3m0QGNqL1LELrUAV6ryrhlMQ0neh4d/preview\" width=\"600\" height=\"800\"></iframe>\r\n            </AboutLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import appConfig from '../config.json';\r\n\r\nconst appFetch = (path, config) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${appConfig.prod}${path}`, config)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                resolve(result);\r\n            },\r\n                error => {\r\n                    reject(error);\r\n                }\r\n            )\r\n    })\r\n}\r\n\r\nexport default class Request {\r\n    get(path) {\r\n        const config = {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }\r\n        return appFetch(path, config)\r\n    }\r\n\r\n    post(path, body) {\r\n        const config = {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(body)\r\n        }\r\n        return appFetch(path, config)\r\n    }\r\n}","import Request from './request';\r\nconst request = new Request()\r\nconst cachingApiLocal = localStorage.getItem('cachingApi');\r\nconst cachingApi = cachingApiLocal ? JSON.parse(cachingApiLocal) : {\r\n    search: {},\r\n    restaurants: {}\r\n};\r\n\r\nclass Api {\r\n    searchList(list) {\r\n        return new Promise((resolve, reject) => {\r\n            const listStr = JSON.stringify(list);\r\n            if (cachingApi.search[listStr] != null) {\r\n                resolve(cachingApi.search[listStr]);\r\n            }\r\n            else {\r\n                request.post('/api/search', { list })\r\n                    .then(res => {\r\n                        cachingApi.search[listStr] = res;\r\n                        localStorage.setItem('cachingApi', JSON.stringify(cachingApi));\r\n                        resolve(res)\r\n                    })\r\n                    .catch(err => { reject(err) })\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    findNearByRestaurants(keyword) {\r\n        keyword = keyword.toLowerCase();\r\n        return new Promise((resolve, reject) => {\r\n            if (cachingApi.restaurants[keyword] != null) {\r\n                resolve(cachingApi.restaurants[keyword]);\r\n            }\r\n            else {\r\n                request.get(`/api/restaurants?nearby=${keyword}`)\r\n                    .then(res => {\r\n                        if (res.status === 'OK') {\r\n                            cachingApi.restaurants[keyword] = res;\r\n                            localStorage.setItem('cachingApi', JSON.stringify(cachingApi));\r\n                        }\r\n                        resolve(res)\r\n                    })\r\n                    .catch(err => { reject(err) })\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new Api();","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport styled from 'styled-components';\r\nimport api from '../services/api';\r\n\r\n\r\nconst MyButton = styled(Button)`\r\n    font-size: 12px;\r\n    margin-left: 10px;\r\n    background-color: #ee2524 !important;\r\n    border-color: #ee2524 !important;\r\n    outline: none !important;\r\n    &:active, &:focus {\r\n        box-shadow: 0 0 0 0.2rem #f36665;\r\n        outline: none !important;\r\n        outline-offset: none !important;\r\n        background-color: #f36665;\r\n    }\r\n    &:visited {box-shadow: 0 0 0 0.2rem #f36665;} /* visited link */\r\n    &:hover {\r\n        background-color: #f36665;\r\n        border-color: #f36665;\r\n  }\r\n`\r\nconst MyCol = styled(Col)`\r\n    display: flex;\r\n`\r\nconst ResultCol = styled(Col)`\r\n    margin-top: 16px;\r\n`\r\nconst TextRed = styled.span`\r\n    color: red;\r\n`\r\nconst TextGreen = styled.span`\r\n    color: lightgreen;\r\n`\r\nconst MyDiv = styled.div`\r\n    margin-left: 24px;\r\n`\r\n\r\n\r\nconst googleMapEndpoint = 'https://maps.google.com/?q=';\r\n\r\nclass SCG extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: { results: [] },\r\n            nearby: { results: [] }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    getGoogleMapLink(location) {\r\n        return `${googleMapEndpoint}${location.lat},${location.lng}`\r\n    }\r\n\r\n    handleKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            e.target.blur()\r\n        }\r\n    }\r\n    searchValue = (e) => {\r\n        api.searchList(this.searchInput.value).then(res => {\r\n            if (Array.isArray(res.results)) {\r\n                this.setState({ search: { results: res.results } });\r\n            }\r\n        })\r\n    }\r\n\r\n    findNearby = () => {\r\n        const keyword = this.nearbyInput.value;\r\n        if (keyword != null && keyword !== '') {\r\n            api.findNearByRestaurants(keyword).then(res => {\r\n                if (Array.isArray(res.results)) {\r\n                    this.setState({ nearby: { results: res.results } });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    renderGoogleMap() {\r\n        const { nearby } = this.state;\r\n        const { results: nearbyResults } = nearby;\r\n        if (nearbyResults.length !== 0) {\r\n            return nearbyResults.map((result, i) => (\r\n                <Accordion key={`restaurants-${i}`}>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.getGoogleMapLink(result.geometry.location)}>{`${result.name}`}</a>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body><MyDiv>{result['formatted_address']}</MyDiv></Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n            )\r\n            )\r\n        }\r\n        return\r\n    }\r\n\r\n    renderSearchResults() {\r\n        const { search } = this.state;\r\n        const { results: searchResults } = search;\r\n        return searchResults.map((result, i) => {\r\n            if (result) { return <li key={`search-${i}`}><TextGreen>{`${result}`}</TextGreen></li> }\r\n            return <li key={`search-${i}`}><TextRed>{`${result}`}</TextRed></li>\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Container>\r\n                <Row>\r\n                    <MyCol>\r\n                        <input type=\"text\" placeholder=\"Search...\" ref={(c) => this.searchInput = c}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            onBlur={this.searchValue}\r\n                        />\r\n                    </MyCol>\r\n                    <MyCol>\r\n                        <input type=\"text\" placeholder=\"Please fill area...\" ref={(c) => this.nearbyInput = c}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            onBlur={this.findNearby}\r\n                        />\r\n                        <MyButton variant=\"danger\" onClick={this.findNearby}>Search</MyButton>\r\n                    </MyCol>\r\n                </Row>\r\n                <Row>\r\n                    <ResultCol>\r\n                        {this.renderSearchResults()}\r\n                    </ResultCol>\r\n                    <ResultCol>\r\n                        {this.renderGoogleMap()}\r\n                    </ResultCol>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SCG;","import React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport Route from \"./route\";\r\n\r\nimport Home from '../components/home';\r\nimport About from '../components/about';\r\nimport SCG from '../components/scg';\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/about\" component={About} />\r\n      <Route path=\"/SCG\" component={SCG} />\r\n    </Switch>\r\n  );\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './App.scss';\n\nimport AppRoutes from './routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <AppRoutes />\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}